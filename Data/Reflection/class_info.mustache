#include <{{{include}}}>

#include <RTTI/ClassInfo.h>
#include <RTTI/RTTIRegister.h>
#include <RTTI/ClassResolver.h>
#include <Core/Attributes.h>

namespace Meta
{
    template <>
    void ClassResolver::Declare<{{{canonical_name}}}>(RTTI::Register& reg, RTTI::ClassInfo& data) {
        data.CanonicalName = "{{{canonical_name}}}";
        data.Attributes    = {
        {{#attributes}}
            {{{value}}},
        {{/attributes}}
        };
    }

    template <>
    void ClassResolver::Define<{{{canonical_name}}}>(RTTI::Register& reg, RTTI::ClassInfo& data) {
        data.Interfaces = {
        {{#interfaces}}
            reg.GetClass("{{name}}"),
        {{/interfaces}}
        };
        /*
        data.Fields = {
        {{#fields}}
            { "{{name}}", &{{{canonical_name}}}::{{name}},  Meta::GetType<{{{type}}}>() }, // {{access}},
        {{/fields}}
        };
        */
        /*
        data.Methods = {
        {{#methods}}
            { "{{name}}", detail::MethodWrapper<decltype(&{{{canonical_name}}}::{{name}}), &{{{canonical_name}}}::{{name}}>() },
        {{/methods}}
        }*/
    }
}